[
  {
    "title": "애자일 모형",
    "concept": "요구사항 변화에 유연하게 대응할 수 있도록 일정한 주기를 반복하면서 개발하는 모형",
    "types": ["스크럼", "XP", "칸반", "Lean", "기능 중심 개발 (FDD; Featrue Driven Development)"]
  },
  {
    "title": "XP의 주요 실천 방법",
    "concept": "XP : eXtreme Programming 요구사항에 유연하게 대응하기 위해 고객의 참여와 개발 과정의 반복을 극대화하여 개발 생산성을 향상시키는 방법",
    "types": [
      "Pair Programming",
      "Collective Ownership",
      "Test-Driven Development",
      "Whole Team",
      "Continuous Integration",
      "Refactoring",
      "Small Releases"
    ]
  },
  {
    "title": "기능 요구사항",
    "concept": "기능 요구사항은 시스템이 무엇을 하는지 어떤 기능을 하는지 등의 기능이나 수행과 관련된 요구사항",
    "types": [
      "입력이나 출력으로 무엇이 포함되어야 하는지",
      "어떤 데이터를 저장하거나 연산을 수행해야 하는지",
      "시스템이 반드시 수행해야 하는 기능",
      "사용자가 시스템을 통해 제공받기를 원하는 기능"
    ]
  },
  {
    "title": "비기능 요구사항",
    "concept": "비기능 요구사항은 품질이나 제약사항과 관련된 요구사항",
    "types": [
      "시스템 장비 구성 요구사항",
      "성능 요구사항",
      "인터페이스 요구사항",
      "데이터를 구축하기 위해 필요한 요구사항",
      "테스트 요구사항",
      "보안 요구사항",
      "품질 요구사항 : 가용성, 정합성, 상호 호환성, 대응성, 이식성, 확장성, 보안성 등"
    ]
  },
  {
    "title": "자료 흐름도의 구성 요소",
    "concept": "자료 흐름도의 구성 요소",
    "types": [
      "프로세스(Process) : 자료 변환 시스템의 한 부분(처리 과정)을 나타내며 처리, 기능, 변환, 버블이라고도 함",
      "자료 흐름(Data Flow) : 자료의 이동(흐름)이나 연관관계를 나타냄",
      "자료 저장소(Data Store) : 자료 저장소(파일, 데이터베이스)를 나타냄",
      "단말(Terminator) : 시스템과 교신하는 외부 개체로 입력 데이터가 만들어지고 출력 데이터를 받음"
    ]
  },
  {
    "title": "UML 연관 관계",
    "concept": "2개 이상의 사물이 서로 관련되어 있는 관계",
    "src": "https://mblogthumb-phinf.pstatic.net/MjAxNzA1MDlfMzUg/MDAxNDk0MzQwMTc4MjIz.H_oCC8zkAfK3rNa6XbKT7w9LaAmeIYxIwz66xem40Bcg.gdFuJxFm_knBuVNydJq7nnHT5_fg_rCAzC8q8TeDhBEg.PNG.ljh0326s/image.png?type=w800",
    "types": [
      "예시 : 사람이 집을 소유하고 있는 관계",
      "실선으로 연결하며 방향성은 화살표로 표현",
      "양방향 관계의 경우 화살표를 생략하고 실선으로만 표현"
    ]
  },
  {
    "title": "UML 집합 관계",
    "concept": "하나의 사물이 다른 사물을 포함하는 관계",
    "src": "https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F08QCg%2FbtqZvMQBDLi%2FPn458IREoSifPA0n8TuzQk%2Fimg.png",
    "types": ["예시 : 자동차가 엔진을 포함하는 관계", "포함되는 쪽에서 포함하는 쪽으로 속이 빈 마름모를 연결하여 표현"]
  },
  {
    "title": "UML 일반화 관계",
    "concept": "하나의 사물이 다른 사물에 비해 더 일반적이거나 구체적인 관계",
    "src": "https://leetaehyun94.github.io/assets/Java/32.PNG",
    "types": [
      "예시 : 아메리카노와 에스프레소는 커피이다. 커피에는 아메리카노와 에스프레소가 있다.",
      "보다 일반적인 개념을 상위(부모), 보다 구체적인 개념을 하위(자식)로 표현",
      "하위 개념에서 상위 개념으로 속이 빈 화살표를 연결하여 표현"
    ]
  },
  {
    "title": "UML 의존 관계",
    "concept": "서로에게 영향을 주는 짧은 시간 동안만 연관을 유지하는 관계",
    "src": "https://mblogthumb-phinf.pstatic.net/MjAxNzA1MDlfMzUg/MDAxNDk0MzQwMTc4MjIz.H_oCC8zkAfK3rNa6XbKT7w9LaAmeIYxIwz66xem40Bcg.gdFuJxFm_knBuVNydJq7nnHT5_fg_rCAzC8q8TeDhBEg.PNG.ljh0326s/image.png?type=w800",
    "types": [
      "예시 : 등급이 높으면 할인율을 적용하고, 등급이 낮으면 할인율을 적용하지 않는다.",
      "하나의 사물과 다른 사물이 소유 관계는 아니지만 변화가 다른 사물에 영향을 미치는 관계",
      "영향을 받는 사물(이용자)이 영향을 주는 사물(제공자) 쪽으로 점선 화살표를 연결하여 표현"
    ]
  },
  {
    "title": "클래스 다이어그램",
    "concept": "클래스와 클래스가 가지는 속성, 클래스 사이의 관계를 표현한 것",
    "src": "https://blog.kakaocdn.net/dn/bgFjC5/btsIt5SOqEb/SV2wnmzKEKedGWsodxVA50/img.png"
  }
]
