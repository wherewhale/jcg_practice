[
  {
    "title": "애자일 모형",
    "concept": "요구사항 변화에 유연하게 대응할 수 있도록 일정한 주기를 반복하면서 개발하는 모형",
    "types": ["스크럼", "XP", "칸반", "Lean", "기능 중심 개발 (FDD; Featrue Driven Development)"]
  },
  {
    "title": "XP의 주요 실천 방법",
    "concept": "XP : eXtreme Programming 요구사항에 유연하게 대응하기 위해 고객의 참여와 개발 과정의 반복을 극대화하여 개발 생산성을 향상시키는 방법",
    "types": [
      "Pair Programming",
      "Collective Ownership",
      "Test-Driven Development",
      "Whole Team",
      "Continuous Integration",
      "Refactoring",
      "Small Releases"
    ]
  },
  {
    "title": "기능 요구사항",
    "concept": "기능 요구사항은 시스템이 무엇을 하는지 어떤 기능을 하는지 등의 기능이나 수행과 관련된 요구사항",
    "types": [
      "입력이나 출력으로 무엇이 포함되어야 하는지",
      "어떤 데이터를 저장하거나 연산을 수행해야 하는지",
      "시스템이 반드시 수행해야 하는 기능",
      "사용자가 시스템을 통해 제공받기를 원하는 기능"
    ]
  },
  {
    "title": "비기능 요구사항",
    "concept": "비기능 요구사항은 품질이나 제약사항과 관련된 요구사항",
    "types": [
      "시스템 장비 구성 요구사항",
      "성능 요구사항",
      "인터페이스 요구사항",
      "데이터를 구축하기 위해 필요한 요구사항",
      "테스트 요구사항",
      "보안 요구사항",
      "품질 요구사항 : 가용성, 정합성, 상호 호환성, 대응성, 이식성, 확장성, 보안성 등"
    ]
  },
  {
    "title": "자료 흐름도의 구성 요소",
    "concept": "자료 흐름도의 구성 요소",
    "types": [
      "프로세스(Process) : 자료 변환 시스템의 한 부분(처리 과정)을 나타내며 처리, 기능, 변환, 버블이라고도 함",
      "자료 흐름(Data Flow) : 자료의 이동(흐름)이나 연관관계를 나타냄",
      "자료 저장소(Data Store) : 자료 저장소(파일, 데이터베이스)를 나타냄",
      "단말(Terminator) : 시스템과 교신하는 외부 개체로 입력 데이터가 만들어지고 출력 데이터를 받음"
    ]
  },
  {
    "title": "UML 연관 관계",
    "concept": "2개 이상의 사물이 서로 관련되어 있는 관계",
    "src": "https://mblogthumb-phinf.pstatic.net/MjAxNzA1MDlfMzUg/MDAxNDk0MzQwMTc4MjIz.H_oCC8zkAfK3rNa6XbKT7w9LaAmeIYxIwz66xem40Bcg.gdFuJxFm_knBuVNydJq7nnHT5_fg_rCAzC8q8TeDhBEg.PNG.ljh0326s/image.png?type=w800",
    "types": [
      "예시 : 사람이 집을 소유하고 있는 관계",
      "실선으로 연결하며 방향성은 화살표로 표현",
      "양방향 관계의 경우 화살표를 생략하고 실선으로만 표현"
    ]
  },
  {
    "title": "UML 집합 관계",
    "concept": "하나의 사물이 다른 사물을 포함하는 관계",
    "src": "https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F08QCg%2FbtqZvMQBDLi%2FPn458IREoSifPA0n8TuzQk%2Fimg.png",
    "types": ["예시 : 자동차가 엔진을 포함하는 관계", "포함되는 쪽에서 포함하는 쪽으로 속이 빈 마름모를 연결하여 표현"]
  },
  {
    "title": "UML 일반화 관계",
    "concept": "하나의 사물이 다른 사물에 비해 더 일반적이거나 구체적인 관계",
    "src": "https://leetaehyun94.github.io/assets/Java/32.PNG",
    "types": [
      "예시 : 아메리카노와 에스프레소는 커피이다. 커피에는 아메리카노와 에스프레소가 있다.",
      "보다 일반적인 개념을 상위(부모), 보다 구체적인 개념을 하위(자식)로 표현",
      "하위 개념에서 상위 개념으로 속이 빈 화살표를 연결하여 표현"
    ]
  },
  {
    "title": "UML 의존 관계",
    "concept": "서로에게 영향을 주는 짧은 시간 동안만 연관을 유지하는 관계",
    "src": "https://mblogthumb-phinf.pstatic.net/MjAxNzA1MDlfMzUg/MDAxNDk0MzQwMTc4MjIz.H_oCC8zkAfK3rNa6XbKT7w9LaAmeIYxIwz66xem40Bcg.gdFuJxFm_knBuVNydJq7nnHT5_fg_rCAzC8q8TeDhBEg.PNG.ljh0326s/image.png?type=w800",
    "types": [
      "예시 : 등급이 높으면 할인율을 적용하고, 등급이 낮으면 할인율을 적용하지 않는다.",
      "하나의 사물과 다른 사물이 소유 관계는 아니지만 변화가 다른 사물에 영향을 미치는 관계",
      "영향을 받는 사물(이용자)이 영향을 주는 사물(제공자) 쪽으로 점선 화살표를 연결하여 표현"
    ]
  },
  {
    "title": "클래스 다이어그램",
    "concept": "클래스와 클래스가 가지는 속성, 클래스 사이의 관계를 표현한 것",
    "src": "https://blog.kakaocdn.net/dn/bgFjC5/btsIt5SOqEb/SV2wnmzKEKedGWsodxVA50/img.png"
  },
  {
    "title": "패키지 다이어그램",
    "concept": "요소들을 그룹화한 패키지 간의 의존 관계를 표현한 것",
    "src": "https://velog.velcdn.com/images/baebae/post/41a19d74-cb0f-4fbc-a83f-2a04fee0e5dd/image.png",
    "types": [
      "패키지: 객체들을 그룹화한 것 (폴더)",
      "객체: 패키지 안에 포함된 클래스, 인터페이스, 테이블 등",
      "의존 관계: 패키지 간의 관계를 표현한 것, 대표적으로 import와 access가 사용됨 (점선 화살표)"
    ]
  },
  {
    "title": "LOC 기법",
    "concept": "각 기능의 원시 코드 라인 수의 비관치, 낙관치, 기대치를 측정하여 예측치를 구하고 이를 이용하여 비용을 산정하는 기법",
    "types": [
      "- 노력(인월) = 개발 기간 (개월) * 인원 수 (명)  = LOC/1인당 월평균 생산 코드 라인 수",
      "- 개발 비용 = 노력(인월) * 인건비 (원/인월)",
      "- 개발 기간 (개월) = 노력(인월) / 인원 수 (명)",
      "- 생산성 = LOC / 노력(인월)"
    ]
  },
  {
    "title": "데이터베이스 스키마",
    "concept": "데이터베이스의 구조와 제약조건에 관한 전반적인 명세를 기술한 것",
    "types": [
      "외부 스키마: 사용자 관점에서 본 데이터베이스의 논리적 구조를 기술한 것",
      "개념적 스키마: 모든 응용 프로그램이나 사용자들 관점에서 본 데이터베이스의 전체적인 논리적 구조를 기술한 것",
      "물리적 스키마: 물리적 저장장치 입장에서 본 데이터베이스의 물리적 구조를 기술한 것"
    ]
  },
  {
    "title": "데이터베이스 설계 순서",
    "concept": "요개논물구",
    "types": ["요구사항 분석", "개념적 설계", "논리적 설계", "물리적 설계", "구현"]
  },
  {
    "title": "개념적 설계",
    "concept": "현실 세계에 대한 인식을 추상적 개념으로 표현하는 과정"
  },
  {
    "title": "논리적 설계",
    "concept": "현실 세계에서 발생하는 자료를 특정 DBMS가 지원하는 논리적 자료 구조로 변환(mapping)시키는 과정"
  },
  {
    "title": "물리적 설계",
    "concept": "논리적 설계에서 논리적 구조로 표현된 데이터를 물리적 구조의 데이터로 변환하는 과정"
  },
  {
    "title": "데이터 모델",
    "concept": "현실 세계의 정보들을 컴퓨터에 표현하기 위해서 단순화, 추상화하여 체계적으로 표현한 개념적 모형",
    "types": [
      "구조 : 논리적으로 표현된 개체 타입들 간의 관계로서 데이터 구조 및 정적 성질 표현",
      "연산 : 데이터베이스에 저장된 실제 데이터를 처리하는 작업에 대한 명세로서 데이터베이스를 조작하는 기본 도구",
      "제약 조건 : 데이터베이스에 저장될 수 있는 실제 데이터의 논리적인 제약 조건"
    ]
  },
  {
    "title": "관계형 데이터베이스의 릴레이션 구조",
    "concept": "릴레이션은 데이터들을 표 현태로 표현한 것으로, 구조를 나타내는 릴레이션 스키마와 실제 값인 릴레이션 인스턴스로 구성된다.",
    "src": "https://blog.kakaocdn.net/dn/9PZHv/btq2lAE2xpY/HfgOTfyyYlhGDH0bLt4IIk/img.png"
  },
  {
    "title": "튜플",
    "concept": "릴레이션의 각 행을 튜플이라고 하며, 튜플은 릴레이션의 속성에 대한 값들의 집합으로 구성된다.",
    "types": [
      "파일 구조에서 레코드와 같은 의미",
      "튜플의 수를 카디널리티라고 하며, 튜플의 수는 릴레이션의 행 수와 같다."
    ]
  },
  {
    "title": "속성",
    "concept": "데이터베이스를 구성하는 가장 작은 논리적 단위이다.",
    "types": [
      "파일 구조상의 데이터 항목 또는 데이터 필드에 해당된다.",
      "속성은 개체의 특성을 기술한다.",
      "속성의 수를 디그리 또는 차수라고 한다."
    ]
  },
  {
    "title": "후보키",
    "concept": "속성들 중에서 튜플을 유일하게 식별하기 위해 사용되는 속성들의 부분집합",
    "types": [
      "유일성 : 하나의 키 값으로 하나의 튜플만을 유일하게 식별할 수 있어야 함",
      "최소성 : 키를 구성하는 속성 하나를 제거하면 유일하게 식별할 수 없도록 꼭 필요한 최소의 속성으로 구성되어야 함"
    ]
  },
  {
    "title": "대체키",
    "concept": "후보키가 둘 이상일 때 기본키를 제외한 나머지 후보키",
    "types": ["대체키를 보조키라고도 한다"]
  },
  {
    "title": "슈퍼키",
    "concept": "한 릴레이션 내에 있는 속성들의 집합으로 구성된 키",
    "types": [
      "모든 튜플 중 슈퍼키로 구성된 속성의 집합과 동일한 값은 나타나지 않는다",
      "유일성은 만족하지만, 최소성은 만족하지 못한다"
    ]
  },
  {
    "title": "외래키",
    "concept": "다른 릴레이션의 기본키를 참조하는 속성 또는 속성들의 집합",
    "types": ["외래키로 지정되면 참조 릴레이션의 기본키에 없는 값은 입력할 수 없다"]
  },
  {
    "title": "무결성",
    "concept": "데이터베이스에 저장된 데이터 값과 현실 세계의 실제값이 일치하는 정확성",
    "types": [
      "개체 무결성 : 기본 테이블의 기본키를 구성하는 어떤 속성도 NULL 값이나 중복값을 가질 수 없다는 규정",
      "참조 무결성 : 외래키는 NULL 값이나 참조 릴레이션의 기본키에 존재하는 값만 가질 수 있다는 규정"
    ]
  },
  {
    "title": "순수 관계 연산자",
    "concept": "관계형 데이터베이스에서 릴레이션을 조작하기 위해 사용하는 연산자",
    "types": [
      "Select(σ) : 릴레이션에서 조건에 맞는 튜플을 선택하는 연산자",
      "Project(π) : 릴레이션에서 조건에 맞는 속성을 선택하는 연산자",
      "Join(⨝) : 두 릴레이션을 결합하여 새로운 릴레이션을 생성하는 연산자",
      "Division(÷) : 두 릴레이션을 나누는 연산자, A ÷ B는 A의 속성 중 B의 속성을 제외한 릴레이션을 생성하는 연산자"
    ]
  },
  {
    "title": "일반 집합 연산자",
    "concept": "합집합, 교집합, 차집합, 교차곱",
    "types": [
      "합집합(UNION) : 두 릴레이션에 존재하는 튜플의 합집합을 구하되, 중복되는 튜플은 제거 (기호 : ∪)",
      "교집합(INTERSECTION) : 두 릴레이션에 존재하는 튜플의 교집합을 구하는 연산 (기호 : ∩)",
      "차집합(DIFFERENCE) : 두 릴레이션에 존재하는 튜플의 차집합을 구하는 연산 (기호 : -)",
      "교차곱(CARTESIAN PRODUCT) : 두 릴레이션에 있는 튜플들의 순서쌍을 구하는 연산 (기호 : ×)"
    ]
  },
  {
    "title": "관계해석",
    "concept": "관계 데이터의 연산을 표현하는 방법",
    "types": [
      "관계 데이터 모델의 제안자인 코드(E. F. Codd)가 수학의 Predicate Calculus(술어 해석)에 기반을 두고 관계 데이터베이스를 위해 제안",
      "관계해석은 원하는 정보가 무엇이라는 것만 정의하는 비절차적 특성을 지닌다.",
      "원하는 정보를 정의할 때는 계산 수식을 사용"
    ]
  },
  {
    "title": "이상 (Anomaly)",
    "concept": "데이터베이스 내에 데이터들이 불필요하게 중복되어 릴레이션 조작 시 예기치 않게 발생하는 곤란한 현상",
    "types": [
      "삽입 이상(Insertion Anomaly) : 데이터를 삽입할 때 의도와는 상관없이 원하지 않는 값들로 인해 삽입할 수 없는 현상",
      "삭제 이상(Deletion Anomaly) : 튜플을 삭제할 때 의도와는 상관없는 값들도 함께 삭제되는, 즉 연쇄 삭제가 발생하는 현상",
      "갱신 이상(Update Anomaly) : 튜플에 있는 속성 값을 갱신할 때 일부 튜플의 정보만 갱신되어 정보에 불일치성(Inconsistency)이 생기는 현상"
    ]
  },
  {
    "title": "함수적 종속",
    "concept": "릴레이션의 속성 간에 성립하는 종속 관계",
    "types": [
      "함수적 종속(Functional Dependency) : 어떤 테이블 R에서 X와 Y를 각각 R의 속성 집합의 부분 집합이라 하자. 속성 X의 값 각각에 대해 시간에 관계없이 항상 속성 Y의 값이 오직 하나만 연관되어 있을 때 Y는 X에 함수적 종속 또는 X가 Y를 함수적으로 결정한다고 한다. (X → Y 로 표기)",
      "완전 함수적 종속(Full Functional Dependency) : 어떤 테이블 R에서 속성 Y가 다른 속성 집합 X 전체에 대해 함수적 종속이면서 속성 집합 X의 어떠한 진부분 집합 Z(즉, Z ⊂ X)에도 함수적 종속이 아닐 때 Y는 X에 완전 함수적 종속이라고 한다. ",
      "부분 함수적 종속(Partial Functional Dependency) : 어떤 테이블 R에서 속성 Y가 다른 속성 집합 X 전체에 대해 함수적 종속이면서 속성 집합 X의 임의의 진부분 집합에 대해 함수적 종속일 때, 속성 Y는 속성 집합 X에 부분 함수적 종속이라고 한다.",
      "이행적 함수적 종속(Transitive Functional Dependency) : X → Y, Y → Z가 성립할 때 X → Z가 성립하는 경우를 이행적 함수적 종속이라고 한다."
    ]
  },
  {
    "title": "정규화",
    "concept": "데이터베이스 설계 시 중복을 최소화하고 이상 현상을 방지하기 위해 릴레이션을 분해하는 과정 (도부이결다조 -> 두부 이걸 다줘..?)",
    "types": [
      "제 1 정규형(1NF) : 모든 속성이 원자값(Atomic Value)으로 되어 있어야 한다.",
      "제 2 정규형(2NF) : 제 1 정규형을 만족하고 부분 함수적 종속이 되어 있지 않아야 한다.",
      "제 3 정규형(3NF) : 제 2 정규형을 만족하고 기본키에 대해 이행적 함수적 종속이 되어 있지 않아야 한다.",
      "BCNF(Boyce-Codd Normal Form) : 제 3 정규형을 만족하고 후보키가 아닌 것이 제거되어야 한다."
    ]
  },
  {
    "title": "반정규화",
    "concept": "시스템의 성능을 향상하고 개발 및 운영의 편의성 등을 높이기 위해 정규화된 데이터 모델을 의도적으로 통합, 중복, 분리하여 정규화 원칙을 위배하는 행위",
    "types": [
      "반정규화를 수행하면 시스템의 성능이 향상되고 관리 효율성은 증가하지만 데이터의 일관성 및 정합성이 저하될 수 있다.",
      "과도한 반정규화는 오히려 성능을 저하시킬 수 있다."
    ]
  },
  {
    "title": "트랜잭션의 특징",
    "concept": "원일독지",
    "types": [
      "원자성(Atomicity) : 트랜잭션은 모두 수행되거나 모두 수행되지 않아야 한다.",
      "일관성(Consistency) : 트랜잭션이 성공적으로 완료되면 데이터베이스는 일관된 상태를 유지해야 한다.",
      "독립성(Isolation) : 트랜잭션은 독립적으로 수행되어야 하며, 다른 트랜잭션의 영향을 받아서는 안 된다.",
      "지속성(Durability) : 트랜잭션이 성공적으로 완료되면 그 결과는 영구적으로 저장되어야 한다."
    ]
  },
  {
    "title": "RTO/RPO",
    "concept": "RTO/RPO는 복구 시간과 복구 시점",
    "types": [
      "RTO(Recovery Time Objective) : 시스템 장애 발생 시 복구되어 가동될 때까지의 소요 시간 (ex. 장애 발생 후 6시간 이내 복구)",
      "RPO(Recovery Point Objective) : 업무 중단 시점으로부터 데이터를 복구할 수 있는 기준점 (ex. 장애 발생 전 지난 주 금요일에 백업해둔 시점으로 복구)"
    ]
  },
  {
    "title": "DAC; Discretionary Access Control",
    "concept": "임의 접근통제 : 데이터에 접근하는 사용자의 신원에 따라 접근 권한을 부여하는 방식",
    "types": [
      "데이터 소유자가 접근통제 권한을 지정하고 제어한다.",
      "객체를 생성한 사용자가 생성된 객체에 대한 모든 권한을 부여받고, 부여된 권한을 다른 사용자에게 허가할 수도 있다."
    ]
  },
  {
    "title": "MAC; Mandatory Access Control",
    "concept": "강제 접근통제 : 주체와 객체의 등급을 비교하여 접근 권한을 부여하는 방식",
    "types": [
      "시스템이 접근통제 권한을 지정한다.",
      "데이터베이스 객체별로 보안 등급을 부여할 수 있다.",
      "사용자별로 인가 등급을 부여할 수 있다."
    ]
  },
  {
    "title": "RBAC; Role Based Access Control",
    "concept": "역할기반 접근통제 : 사용자의 역할에 따라 접근 권한을 부여하는 방식",
    "types": [
      "중앙관리자가 접근통제 권한을 지정한다.",
      "임의 접근통제와 강제 접근통제의 단점을 보완하였다.",
      "다중 프로그래밍 환경에 최적화된 방식이다."
    ]
  },
  {
    "title": "XML(eXtensible Markup Language)",
    "concept": "특수한 목적을 갖는 마크업 언어를 만드는 데 사용되는 다목적 마크업 언어",
    "types": [
      "웹브라우저 간 HTML 문법이 호환되지 않는 문제와 SGML의 복잡함을 해결하기 위하여 개발되었다.",
      "사용자가 직접 문서의 태그를 정의할 수 있으며, 다른 사용자가 정의한 태그를 사용할 수 있다.",
      "트리 구조로 구성되어 있어 상위 태그는 여러 개의 하위 태그를 가질 수 있다."
    ]
  },
  {
    "title": "SOAP(Simple Object Access Protocol)",
    "concept": "네트워크 상에서 HTTP/HTTPS, SMTP 등을 이용하여 XML을 교환하기 위한 통신 규약",
    "types": [
      "웹 서비스에서 사용되는 메시지의 형식과 처리 방법을 지정한다.",
      "기본적으로 HTTP 기반에서 동작하기 때문에 프록시와 방화벽의 영향 없이 통신할 수 있다.",
      "최근에는 무거운 구조의 SOAP 대신 RESTful 프로토콜을 이용하기도 한다."
    ]
  },
  {
    "title": "WSDL (Web Services Description Language)",
    "concept": "웹 서비스와 관련된 서식이나 프로토콜 등을 표준적인 방법으로 기술하고 게시하기 위한 언어",
    "types": [
      "XML로 작성되며, UDDI의 기초가 된다.",
      "SOAP, XML 스키마와 결합하여 인터넷에서 웹 서비스를 제공하기 위해 사용된다.",
      "클라이언트는 WSDL 파일을 읽어 서버에서 어떠한 조작이 가능한지 파악할 수 있다."
    ]
  },
  {
    "title": "모듈화",
    "concept": "시스템의 기능들을 모듈 단위로 나누는 것",
    "types": ["모듈간 결합도(Coupling)의 최소화가 목표", "모듈 내 요소들의 응집도(Cohesion)의 최대화가 목표"]
  },
  {
    "title": "럼바우의 분석 기법",
    "concept": "모든 소프트웨어 구성 요소를 그래픽 표기법을 이용하여 모델링하는 기법",
    "types": [
      "객체 모델링 기법(Object Modeling Technique)이라고도 한다.",
      "분석은 '객체 모델링 - 동적 모델링 - 기능 모델링' 순으로 이루어 진다."
    ]
  },
  {
    "title": "객체, 동적, 기능 모델링",
    "concept": "객동기 모델링의 특징",
    "types": [
      "객체 모델링(Object Modeling): 정보 모델링이라고도 하며, 시스템에서 요구되는 객체를 찾아 속성과 연산 식별 및 객체들 간의 관계를 규정하여 객체 다이어그램으로 표시하는 모델링",
      "동적 모델링(Dynamic Modeling): 상태 다이어그램을 이용하여 시간의 흐름에 따른 객체들 간의 제어 흐름, 상호 작용, 동작 순서 등의 동적인 행위를 표현하는 모델링",
      "기능 모델링(Functional Modeling): 자료 흐름도(DFD)를 이용하여 다수의 프로세스들 간의 자료 흐름을 중심으로 처리 과정을 표현한 모델링"
    ]
  },
  {
    "title": "객체지향 설계 원칙(SOLID)",
    "concept": "SOLID",
    "types": [
      "단일 책임 원칙(SRP): 클래스는 단 하나의 책임만 가져야 한다.",
      "개방-폐쇄 원칙(OCP): 기존 코드를 변경하지 않고 기능을 추가할 수 있어야 한다.",
      "리스코프 치환 원칙(LSP): 자식 클래스는 부모 클래스를 대체할 수 있어야 한다.",
      "인터페이스 분리 원칙(ISP): 자신이 사용하지 않는 인터페이스와 의존 관계를 맺거나 영향을 받지 않아야 한다.",
      "의존 역전 원칙(DIP): 의존 관계 성립 시 추상성이 높은 클래스와 의존 관계를 맺어야 한다."
    ]
  },
  {
    "title": "결합도",
    "concept": "모듈 간에 상호 의존하는 정도로 결합도가 약할수록 품질이 높다. (좌측부터 결합도 높음 : 내공외제스자)",
    "types": [
      "내용 결합도(Content Coupling): 한 모듈이 다른 모듈의 내부 기능 및 그 내부 자료를 직접 참조하거나 수정할 때의 결합도",
      "공통 결합도(Common Coupling): 공유되는 공통 데이터 영역을 여러 모듈이 사용할 때의 결합도",
      "외부 결합도(External Coupling): 어떤 모듈에서 선언한 데이터를 외부의 다른 모듈에서 참조할 때의 결합도",
      "제어 결합도(Control Coupling): 어떤 모듈이 다른 모듈 내부의 논리적인 흐름을 제어하기 위해 제어 신호나 제어 요소를 전달하는 결합도",
      "스탬프 결합도(Stamp Coupling): 모듈 간의 인터페이스로 배열이나 레코드 등의 자료 구조가 전달될 때의 결합도",
      "자료 결합도(Data Coupling): 모듈 간의 인터페이스가 자료 요소로만 구성될 때의 결합도"
    ]
  },
  {
    "title": "응집도",
    "concept": "모듈의 내부 요소들이 서로 관련되어 있는 정도로 응집도가 강할수록 품질이 높다 (좌측부터 응집도 높음 : 기순교절시논우)",
    "types": [
      "기능적 응집도(Functional Cohesion): 모듈 내부의 모든 기능 요소들이 단일 문제와 연관되어 수행될 경우의 응집도",
      "순차적 응집도(Sequential Cohesion): 모듈 내 하나의 활동으로부터 나온 출력 데이터를 그 다음 활동의 입력 데이터로 사용할 경우의 응집도",
      "교환적 응집도(Communicational Cohesion): 동일한 입력과 출력을 사용하여 서로 다른 기능을 수행하는 구성 요소들이 모였을 경우의 응집도",
      "절차적 응집도(Procedural Cohesion): 모듈이 다수의 관련 기능을 가질 때 모듈 안의 구성 요소들이 그 기능을 순차적으로 수행할 경우의 응집도",
      "시간적 응집도(Temporal Cohesion): 특정 시간에 처리되는 몇 개의 기능을 모아 하나의 모듈로 작성할 경우의 응집도",
      "논리적 응집도(Logical Cohesion): 유사한 성격을 갖거나 특정 형태로 분류되는 처리 요소들로 하나의 모듈이 형성되는 경우의 응집도",
      "우연적 응집도(Temporal Cohesion): 모듈 내의 구성 요소들이 서로 아무런 관계 없이 단순히 모여 있는 경우의 응집도"
    ]
  },
  {
    "title": "팬인/팬아웃",
    "concept": "모듈 제어 주체와 제어 피주체 간의 관계를 나타내는 지표",
    "src": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTRiPsu0AYrY0VMs3UnWx4T_f1z1Et13DIxDg&s",
    "types": ["팬인(Fan-in): 어떤 모듈을 제어하는 모듈의 수", "팬아웃(Fan-out): 어떤 모듈에 의해 제어되는 모듈의 수"]
  },
  {
    "title": "IPC(Inter-Process Communication)",
    "concept": "모듈 간 통신 방식을 구현하기 위해 사용되는 대표적인 프로그래밍 인터페이스 집합 \n아래는 대표 메소드 5가지",
    "types": [
      "공유 메모리(Shared Memory)",
      "소켓(Socket)",
      "세마포어(Semaphore)",
      "파이프와 네임드 파이프(Pipes & named Pipes)",
      "메시지 큐잉(Message Queuing)"
    ]
  },
  {
    "title": "테스트 케이스",
    "concept": "소프트웨어가 사용자의 요구사항을 정확하게 준수했는지를 확인하기 위한 테스트 항목에 대한 명세서 \n아래는 ISO/IEC/IEEE 29119-3 표준에 따른 테스트 케이스 구성 요소",
    "types": [
      "식별자: 항목 식별자, 일련번호",
      "테스트 항목: 테스트 대상(모듈 또는 기능)",
      "입력 명세: 테스트 데이터 또는 테스트 조건",
      "출력 명세: 테스트 케이스 수행 시 예상되는 출력 결과",
      "환경 설정: 필요한 하드웨어나 소프트웨어의 환경",
      "특수 절차 요구: 테스트 케이스 수행 시 특별히 요구되는 절차",
      "의존성 기술: 테스트 케이스 간의 의존성"
    ]
  },
  {
    "title": "재사용",
    "concept": "이미 개발된 기능들을 새로운 시스템이나 개발에 사용하기 적합하도록 최적화하는 작업",
    "types": [
      "함수와 객체 : 클래스나 메소드 단위의 소스 코드를 재사용",
      "컴포넌트: 컴포넌트 자체에 대한 수정 없이 인터페이스를 통해 통신하는 방식으로 재사용",
      "애플리케이션: 공통된 기능들을 제공하는 애플리케이션을 공유하는 방식으로 재사용"
    ]
  },
  {
    "title": "디자인 패턴",
    "concept": "모듈 간의 관계 및 인터페이스를 설계할 때 참조할 수 있는 전형적인 해결 방식 또는 예제\n아래는 GOF의 디자인 패턴",
    "types": ["생성 패턴(Creational Pattern)", "구조 패턴(Structural Pattern)", "행위 패턴(Behavioral Pattern)"]
  },
  {
    "title": "생성 패턴",
    "concept": "클래스나 객체의 생성과 참조 과정을 정의하는 패턴",
    "types": [
      "추상 팩토리(Abstract Factory): 구체적인 클래스에 의존하지 않고, 인터페이스를 통해 서로 연관, 의존하는 객체들의 그룹으로 생성하여 추상적으로 표현하는 패턴",
      "빌더(Builder): 작게 분리된 인스턴스를 건축 하듯이 조합하여 객체를 생성하는 패턴",
      "팩토리 메소드(Factory Method): 객체 생성을 서브 클래스에서 처리하도록 분리하여 캡슐화한 패턴",
      "프로토타입(Prototype): 원본 객체를 복제하는 방법으로 객체를 생성하는 패턴",
      "싱글톤(Singleton): 하나의 객체를 생성하면 생성된 객체를 어디서든 참조할 수 있지만, 여러 프로세스가 동시에 참조할 수 없는 패턴"
    ]
  },
  {
    "title": "구조 패턴",
    "concept": "구조가 복잡한 시스템을 개발하기 쉽도록 클래스나 객체들을 조합하여 더 큰 구조로 만드는 패턴",
    "types": [
      "어댑터(Adapter): 호환성이 없는 클래스들의 인터페이스를 다른 클래스가 이용할 수 있도록 변환해주는 패턴",
      "브리지(Bridge): 구현부에서 추상층을 분리하여 서로가 독립적으로 확장할 수 있도록 구성한 패턴",
      "컴포지트(Composite): 여러 객체를 가진 복합 객체와 단일 객체를 구분 없이 다루고자 할 때 사용하는 패턴",
      "데코레이터(Decorator): 객체 간의 결합을 통해 능동적으로 기능들을 확장할 수 있는 패턴",
      "퍼사드(Facade): 복잡한 서브 클래스들을 피해 더 사위에 인터페이스를 구성함으로써 서브 클래스들의 기능을 간편하게 사용할 수 있도록 하는 패턴",
      "플라이웨이트(Flyweight): 인스턴스가 필요할 때마다 매번 생성하는 것이 아니고 가능한 한 공유해서 사용함으로써 메모리를 절약하는 패턴",
      "프록시(Proxy): 복잡한 시스템을 개발하기 쉽도록 클래스나 객체들을 조합하는 패턴으로 대리자라고도 불림"
    ]
  },
  {
    "title": "행위 패턴",
    "concept": "클래스나 객체들이 서로 상호작용하는 방법이나 책임 분배 방법을 정의하는 패턴",
    "types": [
      "책임 연쇄(Chain of Responsibility): 요청을 처리할 수 있는 객체가 둘 이상 존재하여 한 객체가 처리하지 못하면 다음 객체로 넘어가는 형태의 패턴",
      "커맨드(Command): 요청을 객체의 형태로 캡슐화하여 재이용하거나 취소할 수 있도록 요청에 필요한 정보를 저장하거나 로그에 남기는 패턴",
      "인터프리터(Interpreter): 언어에 문법 표현을 정의하는 패턴",
      "반복자(Iterator): 자료 구조와 같이 접근이 잦은 객체에 대해 동일한 인터페이스를 사용하도록 하는 패턴",
      "중재자(Mediator): 수많은 객체들 간의 복잡한 상호작용을 캡슐화하여 객체로 정의하는 패턴",
      "메멘토(Memento): 특정 시점에서의 객체 내부 상태를 객체화함으로써 이후 요청에 따라 객체를 해당 시점의 상태로 돌릴 수 있는 기능을 제공하는 패턴",
      "옵서버(Observer): 한 객체의 상태가 변화하면 객체에 상속되어 있는 다른 객체들에게 변화된 상태를 전달하는 패턴",
      "상태(State): 객체의 상태에 따라 동일한 동작을 다르게 처리해야 할 때 사용하는 패턴",
      "전략(Strategy): 동일한 계열의 알고리즘들을 개별적으로 캡슐화하여 상호 교환할 수 있게 정의하는 패턴",
      "템플릿 메소드(Template Method): 상위 클래스에서 골격을 정의하고, 하위 클래스에서 세부 처리를 구체화하는 구조의 패턴",
      "방문자(Visitor): 각 클래스들의 데이터 구조에서 처리 기능을 분리하여 별도의 클래스로 구성하는 패턴"
    ]
  },
  {
    "title": "EAI",
    "concept": "Enterprise Application Integration : 기업 내 각종 애플리케이션 및 플랫폼 간의 정보 전달, 연계, 통합 등 상호 연동이 가능하게 해주는 솔루션",
    "types": [
      "Point-to-Point : 가장 기본적인 애플리케이션 통합 방식으로 1:1로 연결한다. 변경 및 재사용이 어렵다.",
      "Hub & Spoke : 단일 접점인 허브 시스템을 통해 데이터를 전송하는 중앙 집중형 방식으로 확장 및 유지 보수가 용이하다. 허브 장애 발생 시 시스템 전체에 영향을 미친다.",
      "Message Bus(ESB 방식) : 애플리케이션 사이에 미들웨어를 두어 처리하는 방식으로, 확장성이 뛰어나며 대용량 처리가 가능하다.",
      "Bus Hybrid : Hub & Spoke와 Message Bus 방식을 혼합 방식이다."
    ]
  },
  {
    "title": "JSON",
    "concept": "JavaScript Object Notation : 데이터 객체를 속성 /값 쌍 (Attribute-Value Pairs) 형태로 표현하는 개방형 표준 포맷"
  },
  {
    "title": "AJAX",
    "concept": "Asynchronous JavaScript and XML : 클라이언트와 서버 간에 XML 데이터를 주고 받는 비동기 통신 기술"
  },
  {
    "title": "IPsec",
    "concept": "IP Security",
    "types": [
      "네트워크 계층에서 IP 패킷 단위의 데이터 변조 방지 및 은닉 기능을 제공하는 프로토콜",
      "암호화 수행 시 암호화와 복호화가 모두 가능한 양방향 암호화 방식을 사용한다.",
      "구성 요소 : AH, ESP",
      "운영 모드 : 터널 모드, 전송 모드"
    ]
  },
  {
    "title": "SSL",
    "concept": "Secure Socket Layer",
    "types": ["TCP/IP 계층과 애플리케이션 계층 사이에서 인증, 암호화, 무결성을 보장하는 프로토콜"]
  },
  {
    "title": "S-HTTP",
    "concept": "Secure Hypertext Transfer Protocol",
    "types": ["클라이언트와 서버 간에 전송되는 모든 메시지를 암호화 하는 프로토콜"]
  },
  {
    "title": "인터페이스 구현 검증 도구",
    "concept": "xSFNSw",
    "types": [
      "xUnit: 같은 테스트 코드를 여러 번 작성하지 않게 도와주며, 테스트마다 예상 결과를 기억할 필요가 없게 하는 자동화된 해법을 제공하는 단위 테스트 프레임워크",
      "STAF: 서비스 호출 및 컴포넌트 재사용 등 다양한 환경을 지원하는 테스트 프레임워크",
      "FitNesse: 웹 기반 테스트 케이스 설계, 실행, 결과 확인 등을 지원하는 테스트 프레임워크",
      "NTAF: FitNesse의 장점인 협업 기능과 STAF의 장점인 재사용 및 확장성을 통합한 NHN(Naver)의 테스트 자동화 프레임워크",
      "Selenium: 다양한 브라우저 및 개발 언어를 지원하는 웹 애플리케이션 테스트 프레임워크",
      "watir: 인터프리터 방식의 객체 지향 스크립트 언어인 Ruby를 사용하는 애플리케이션 테스트 프레임워크"
    ]
  },
  {
    "title": "UI",
    "concept": "User Interface, 사용자 인터페이스 : 사용자와 시스템 간의 상호작용이 이뤄지도록 도와주는 장치나 소프트웨어",
    "types": [
      "CLI(Command Line Interface): 명령과 출력이 텍스트 형태로 이뤄지는 인터페이스",
      "GUI(Graphical User Interface): 아이콘이나 메뉴를 마우스로 선택하여 작업을 수행하는 그래픽 환경의 인터페이스",
      "NUI(Natural User Interface): 사용자의 말이나 행동 등 자연스러운 움직임을 통해 기기를 조작하는 인터페이스"
    ]
  },
  {
    "title": "UX",
    "concept": "User Experience, 사용자 경험 : 사용자가 시스템이나 서비스를 이용하면서 느끼고 생각하게 되는 총체적인 경험"
  },
  {
    "title": "UI의 기본 원칙",
    "concept": "UI/UX 설계 시 고려해야 할 원칙",
    "types": [
      "직관성 : 누구나 쉽게 이해하고 사용할 수 있어야 함",
      "유효성 : 사용자의 목적을 정확하고 완벽하게 달성해야 함",
      "학습성 : 누구나 쉽게 배우고 익힐 수 있어야 함",
      "유연성 : 사용자의 요구사항을 최대한 수용하고 실수를 최소화해야 함"
    ]
  },
  {
    "title": "애플리케이션 테스트의 기본 원리",
    "concept": "파살오",
    "types": [
      "파레토 법칙(Pareto Principle): 전체 결함의 80%는 20%의 원인으로 발생한다는 법칙",
      "살충제 패러독스(Pesticide Paradox): 동일한 테스트 케이스를 반복적으로 수행하면 결함을 발견할 수 없다는 패러독스",
      "오류-부재의 법칙(Error-Absence Fallacy): 소프트웨어의 결함을 모두 제거해도 요구사항을 만족시키지 못하면 해당 소프트웨어는 품질이 높다고 말할 수 없는 것"
    ]
  },
  {
    "title": "정적 테스트",
    "concept": "프로그램을 실행하지 않고 명세서나 소스 코드를 대상으로 분석하는 테스트 (코딩 표준, 스타일, 복잡도, 남은 결함을 발견하기 위해 사용)",
    "types": ["워크스루", "인스펙션", "코드 검사"]
  },
  {
    "title": "동적 테스트",
    "concept": "프로그램을 실행하여 오류를 찾는 테스트 (소프트웨어 개발의 모든 단계에서 테스트를 수행)",
    "types": ["블랙박스 테스트", "화이트박스 테스트"]
  },
  {
    "title": "화이트박스 테스트의 검증 기준",
    "concept": "응용 프로그램의 내부 구조와 동작을 검사하는 소프트웨어 테스트 방식",
    "types": [
      "문장 검증 기준(Statement Coverage): 소스 코드의 모든 구문이 한 번 이상 수행되도록 테스트를 설계",
      "결정 검증 기준(Decision Coverage, Branch Coverage): 소스 코드의 모든 조건문에 대해 조건식의 결과가 True인 경우와 False인 경우가 한 번 이상 수행되도록 테스트 케이스를 설계",
      "조건 검증 기준(Condition Coverage): 소스 코드의 조건문에 포함된 개별 조건식의 결과가 True인 경우와 False인 경우가 한 번 이상 수행되도록 테스트 케이스를 설계",
      "조건/결정 검증 기준(Condition/Decision Coverage): 결정 검증 기준과 조건 검증 기준을 모두 만족하는 설계로, 조건문이 True인 경우와 False인 경우에 따라 조건 검증 기준의 입력 데이터를 구분하는 테스트 케이스를 설계",
      "변경 조건/결정 검증 기준(Modified Condition/Decision Coverage): 조건/결정 검증 기준을 향상시킨 검증 기준으로, 개별 조건식이 다른 개별 조건식의 영향을 받지 않고 전체 조건식의 결과에 독립적으로 영향을 주도록 테스트 케이스를 설계",
      "다중 조건 검증 기준(Multiple Condition Coverage): 소스 코드의 조건문에 포함된 모든 개별 조건식의 모든 조합을 고려하도록 테스트 케이스를 설계"
    ]
  },
  {
    "title": "블랙박스 테스트",
    "concept": "각 기능이 완전히 작동되는 것을 입증하는 테스트로 기능 테스트라고도 한다.",
    "types": [
      "동치 분할 검사(Equivalence Partitioning Testing): 입력 조건에 타당한 입력 자료와 타당하지 않은 입력 자료의 개수를 균등하게 하여 테스트 케이스를 정하고, 해당 입력 자료에 맞는 결과가 출력되는지 확인하는 기법",
      "경계값 분석(Boundary Value Analysis): 입력 조건의 중간값보다 경계값에서 오류가 발생될 확률이 높다는 점을 이용하여 입력 조건의 경계값을 테스트 케이스로 선정하여 검사하는 기법",
      "원인-효과 그래프 검사(Cause-Effect Graphing Testing): 입력 데이터 간의 관계와 출력에 영향을 미치는 상황을 체계적으로 분석한 다음 효용성이 높은 테스트 케이스를 선정하여 검사하는 기법",
      "오류 예측 검사(Error Guessing): 과거의 경험이나 확인자의 감각으로 테스트하는 기법",
      "비교 검사(Comparison Testing): 여러 버전의 프로그램에 동일한 테스트 자료를 제공하여 동일한 결과가 출력되는지 테스트하는 기법"
    ]
  },
  {
    "title": "개발 단계에 따른 애플리케이션 테스트",
    "concept": "소프트웨어의 개발 단계에 따라 단위 테스트, 통합 테스트, 시스템 테스트, 인수 테스트로 분류되며 이를 테스트 레벨이라고 한다.\n애플리케이션 테스트와 소프트웨어 개발 단계를 연결하여 표현한 것을 V-모델이라고 한다.",
    "types": [
      "1. 요구사항(Requirement) - 소프트웨어 개발 단계",
      "2. 분석(Specification) - 소프트웨어 개발 단계",
      "3. 설계(Design) - 소프트웨어 개발 단계",
      "4. 구현(Code) - 소프트웨어 개발 단계",
      "5. 단위 테스트(Unit Testing) - 테스트 단계",
      "6. 통합 테스트(Integration Testing) - 테스트 단계",
      "7. 시스템 테스트(System Testing) - 테스트 단계",
      "8. 인수 테스트(Acceptance Testing) - 테스트 단계"
    ]
  },
  {
    "title": "단위 테스트",
    "concept": "코딩 직후 소프트웨어 설계의 최소 단위인 모듈이나 컴포넌트에 초점을 맞춰 테스트하는 것",
    "types": [
      "인터페이스, 외부적 I/O, 자료 구조, 독립적 기초 경로, 오류 처리 경로, 경계 조건 등을 검사",
      "사용자의 요구사항을 기반으로 한 기능성 테스트를 최우선으로 수행",
      "구조 기반 테스트와 명세 기반 테스트로 나뉘지만 주로 구조 기반 테스트를 시행"
    ]
  },
  {
    "title": "통합 테스트",
    "concept": "단위 테스트가 완료된 모듈들을 결합하여 하나의 시스템으로 완성시키는 과정에서의 테스트",
    "types": [
      "비점진적 통합 방식 : 단계적으로 통합하는 절차 없이 모든 모듈이 미리 결합되어 있는 프로그램 전체를 테스트 (빅뱅 통합 테스트 방식)",
      "점진적 통합 방식 : 모듈 단위로 단계적으로 통합하면서 테스트하는 방법 (하향식 통합 테스트, 상향식 통합 테스트, 혼합식 통합 테스트)"
    ]
  },
  {
    "title": "인수 테스트",
    "concept": "사용자의 요구사항을 충족하는지에 중점을 두고 테스트하는 것 (사용자가 직접 테스트)",
    "types": [
      "알파 테스트: 사용자가 개발자 앞에서 행하는 테스트 기법으로 통제된 환경에서 오류와 사용상의 문제점을 사용자와 개발자가 함께 확인하면서 기록",
      "베타 테스트: 선정된 최종 사용자가 여러 명의 사용자 앞에서 행하는 테스트 기법으로 실업무를 가지고 사용자가 직접 테스트"
    ]
  },
  {
    "title": "하향식 통합 테스트",
    "concept": "상위 모듈에서 하위 모듈 방향으로 통합하면서 테스트하는 기법으로 스텁(Stub)을 사용하여 하위 모듈을 대체한다.",
    "types": [
      "1. 주요 제어 모듈은 작성된 프로그램을 사용하고, 주요 제어 모듈의 종속 모듈들은 스텁으로 대체",
      "2. 깊이 우선 또는 넓이 우선 등의 통합 방식에 따라 하위 모듈인 스텁들이 한 번에 하나씩 실제 모듈로 교체",
      "3. 모듈이 통합될 때마다 테스트를 실시",
      "4. 새로운 오류가 발생하지 않음을 보증하기 위해 회귀 테스트를 실시"
    ]
  },
  {
    "title": "상향식 통합 테스트",
    "concept": "하위 모듈에서 상위 모듈 방향으로 통합하면서 테스트하는 기법으로 드라이버(Driver)를 사용하여 상위 모듈을 대체한다.",
    "types": [
      "1. 하위 모듈들을 클러스터로 결합한다.",
      "2. 상위 모듈에서 데이터의 입/출력을 확인하기 위해 더미 모듈인 드라이버를 작성",
      "3. 통합된 클러스터 단위로 테스트",
      "4. 테스트가 완료되면 클러스터는 프로그램 구조의 상위로 이동하여 결합하고 드라이버는 실제 모듈로 대체"
    ]
  },
  {
    "title": "회귀 테스트",
    "concept": "통합 테스트로 인해 변경된 모듈이나 컴포넌트에 새로운 오류가 있는지 확인하는 테스트",
    "types": [
      "이미 테스트된 프로그램의 테스팅을 반복하는 것이다.",
      "회귀 테스트는 수정된 모듈이나 컴포넌트가 다른 부분에 영향을 미치는지, 오류가 생기지 않았는지 테스트하여 새로운 오류가 발생하지 않음을 보증하기 위해 반복 테스트한다."
    ]
  },
  {
    "title": "테스트 오라클",
    "concept": "테스트 결과가 올바른지 판단하기 위해 사전에 정의된 참값을 대입하여 비교하는 기법",
    "types": [
      "참(True) 오라클 : 모든 테스트 케이스의 입력 값에 대해 기대하는 결과를 제공하는 오라클로, 발생된 모든 오류를 검출 가능",
      "샘플링(Sampling) 오라클 : 특정한 몇몇 테스트 케이스의 입력 값들에 대해서만 기대하는 결과를 제공하는 오라클로 전수 테스트가 불가능한 경우 사용하는 오라클",
      "추정(Heuristic) 오라클 : 특정 테스트 케이스의 입력 값에 대해 기대하는 결과를 제공하고, 나머지 입력 값들에 대해서는 추정으로 처리하는 오라클",
      "일관성 검사(Consistent) 오라클 : 애플리케이션에 변경이 있을 때, 테스트 케이스의 수행 전과 후의 결과 값이 동일한지를 확인하는 오라클"
    ]
  },
  {
    "title": "애플리케이션 성능 지표",
    "concept": "애플리케이션의 성능을 측정하기 위한 지표",
    "types": [
      "처리량(Throughput): 일정 시간 내에 애플리케이션이 처리하는 일의 양",
      "응답 시간(Response Time): 애플리케이션에 요청을 전달한 시간부터 응답이 도착할 때까지 걸린 시간",
      "경과 시간(Turn Around Time): 애플리케이션에 작업을 의뢰한 시간부터 처리가 완료될 때까지 걸린 시간",
      "자원 사용률(Resource Utilization): 애플리케이션이 의뢰한 작업을 처리하는 동안의 CPU 사용량, 메모리 사용량, 네트워크 사용량 등 자원 사용률"
    ]
  },
  {
    "title": "소스 코드 품질 분석 도구 - 정적 분석 도구",
    "concept": "작성한 소스 코드를 실행하지 않고 코딩 표준이나 코딩 스타일, 결함 등을 확인하는 코드 분석 도구",
    "types": ["pmd", "cppcheck", "SonarQube", "checkstyle", "ccm", "cobertura"]
  },
  {
    "title": "소스 코드 품질 분석 도구 - 동적 분석 도구",
    "concept": "작성한 소스 코드를 실행하여 코드에 존재하는 메모리 누수, 스레드 결함 등을 분석하는 도구",
    "types": ["Avalanche", "Valgrind"]
  }
]
