[
  {
    "title": "애자일 모형",
    "concept": "요구사항 변화에 유연하게 대응할 수 있도록 일정한 주기를 반복하면서 개발하는 모형",
    "types": ["스크럼", "XP", "칸반", "Lean", "기능 중심 개발 (FDD; Featrue Driven Development)"]
  },
  {
    "title": "XP의 주요 실천 방법",
    "concept": "XP : eXtreme Programming 요구사항에 유연하게 대응하기 위해 고객의 참여와 개발 과정의 반복을 극대화하여 개발 생산성을 향상시키는 방법",
    "types": [
      "Pair Programming",
      "Collective Ownership",
      "Test-Driven Development",
      "Whole Team",
      "Continuous Integration",
      "Refactoring",
      "Small Releases"
    ]
  },
  {
    "title": "기능 요구사항",
    "concept": "기능 요구사항은 시스템이 무엇을 하는지 어떤 기능을 하는지 등의 기능이나 수행과 관련된 요구사항",
    "types": [
      "입력이나 출력으로 무엇이 포함되어야 하는지",
      "어떤 데이터를 저장하거나 연산을 수행해야 하는지",
      "시스템이 반드시 수행해야 하는 기능",
      "사용자가 시스템을 통해 제공받기를 원하는 기능"
    ]
  },
  {
    "title": "비기능 요구사항",
    "concept": "비기능 요구사항은 품질이나 제약사항과 관련된 요구사항",
    "types": [
      "시스템 장비 구성 요구사항",
      "성능 요구사항",
      "인터페이스 요구사항",
      "데이터를 구축하기 위해 필요한 요구사항",
      "테스트 요구사항",
      "보안 요구사항",
      "품질 요구사항 : 가용성, 정합성, 상호 호환성, 대응성, 이식성, 확장성, 보안성 등"
    ]
  },
  {
    "title": "자료 흐름도의 구성 요소",
    "concept": "자료 흐름도의 구성 요소",
    "types": [
      "프로세스(Process) : 자료 변환 시스템의 한 부분(처리 과정)을 나타내며 처리, 기능, 변환, 버블이라고도 함",
      "자료 흐름(Data Flow) : 자료의 이동(흐름)이나 연관관계를 나타냄",
      "자료 저장소(Data Store) : 자료 저장소(파일, 데이터베이스)를 나타냄",
      "단말(Terminator) : 시스템과 교신하는 외부 개체로 입력 데이터가 만들어지고 출력 데이터를 받음"
    ]
  },
  {
    "title": "UML 연관 관계",
    "concept": "2개 이상의 사물이 서로 관련되어 있는 관계",
    "src": "https://mblogthumb-phinf.pstatic.net/MjAxNzA1MDlfMzUg/MDAxNDk0MzQwMTc4MjIz.H_oCC8zkAfK3rNa6XbKT7w9LaAmeIYxIwz66xem40Bcg.gdFuJxFm_knBuVNydJq7nnHT5_fg_rCAzC8q8TeDhBEg.PNG.ljh0326s/image.png?type=w800",
    "types": [
      "예시 : 사람이 집을 소유하고 있는 관계",
      "실선으로 연결하며 방향성은 화살표로 표현",
      "양방향 관계의 경우 화살표를 생략하고 실선으로만 표현"
    ]
  },
  {
    "title": "UML 집합 관계",
    "concept": "하나의 사물이 다른 사물을 포함하는 관계",
    "src": "https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2F08QCg%2FbtqZvMQBDLi%2FPn458IREoSifPA0n8TuzQk%2Fimg.png",
    "types": ["예시 : 자동차가 엔진을 포함하는 관계", "포함되는 쪽에서 포함하는 쪽으로 속이 빈 마름모를 연결하여 표현"]
  },
  {
    "title": "UML 일반화 관계",
    "concept": "하나의 사물이 다른 사물에 비해 더 일반적이거나 구체적인 관계",
    "src": "https://leetaehyun94.github.io/assets/Java/32.PNG",
    "types": [
      "예시 : 아메리카노와 에스프레소는 커피이다. 커피에는 아메리카노와 에스프레소가 있다.",
      "보다 일반적인 개념을 상위(부모), 보다 구체적인 개념을 하위(자식)로 표현",
      "하위 개념에서 상위 개념으로 속이 빈 화살표를 연결하여 표현"
    ]
  },
  {
    "title": "UML 의존 관계",
    "concept": "서로에게 영향을 주는 짧은 시간 동안만 연관을 유지하는 관계",
    "src": "https://mblogthumb-phinf.pstatic.net/MjAxNzA1MDlfMzUg/MDAxNDk0MzQwMTc4MjIz.H_oCC8zkAfK3rNa6XbKT7w9LaAmeIYxIwz66xem40Bcg.gdFuJxFm_knBuVNydJq7nnHT5_fg_rCAzC8q8TeDhBEg.PNG.ljh0326s/image.png?type=w800",
    "types": [
      "예시 : 등급이 높으면 할인율을 적용하고, 등급이 낮으면 할인율을 적용하지 않는다.",
      "하나의 사물과 다른 사물이 소유 관계는 아니지만 변화가 다른 사물에 영향을 미치는 관계",
      "영향을 받는 사물(이용자)이 영향을 주는 사물(제공자) 쪽으로 점선 화살표를 연결하여 표현"
    ]
  },
  {
    "title": "클래스 다이어그램",
    "concept": "클래스와 클래스가 가지는 속성, 클래스 사이의 관계를 표현한 것",
    "src": "https://blog.kakaocdn.net/dn/bgFjC5/btsIt5SOqEb/SV2wnmzKEKedGWsodxVA50/img.png"
  },
  {
    "title": "패키지 다이어그램",
    "concept": "요소들을 그룹화한 패키지 간의 의존 관계를 표현한 것",
    "src": "https://velog.velcdn.com/images/baebae/post/41a19d74-cb0f-4fbc-a83f-2a04fee0e5dd/image.png",
    "types": [
      "패키지: 객체들을 그룹화한 것 (폴더)",
      "객체: 패키지 안에 포함된 클래스, 인터페이스, 테이블 등",
      "의존 관계: 패키지 간의 관계를 표현한 것, 대표적으로 import와 access가 사용됨 (점선 화살표)"
    ]
  },
  {
    "title": "LOC 기법",
    "concept": "각 기능의 원시 코드 라인 수의 비관치, 낙관치, 기대치를 측정하여 예측치를 구하고 이를 이용하여 비용을 산정하는 기법",
    "types": [
      "- 노력(인월) = 개발 기간 (개월) * 인원 수 (명)  = LOC/1인당 월평균 생산 코드 라인 수",
      "- 개발 비용 = 노력(인월) * 인건비 (원/인월)",
      "- 개발 기간 (개월) = 노력(인월) / 인원 수 (명)",
      "- 생산성 = LOC / 노력(인월)"
    ]
  },
  {
    "title": "데이터베이스 스키마",
    "concept": "데이터베이스의 구조와 제약조건에 관한 전반적인 명세를 기술한 것",
    "types": [
      "외부 스키마: 사용자 관점에서 본 데이터베이스의 논리적 구조를 기술한 것",
      "개념적 스키마: 모든 응용 프로그램이나 사용자들 관점에서 본 데이터베이스의 전체적인 논리적 구조를 기술한 것",
      "물리적 스키마: 물리적 저장장치 입장에서 본 데이터베이스의 물리적 구조를 기술한 것"
    ]
  },
  {
    "title": "데이터베이스 설계 순서",
    "concept": "요개논물구",
    "types": ["요구사항 분석", "개념적 설계", "논리적 설계", "물리적 설계", "구현"]
  },
  {
    "title": "개념적 설계",
    "concept": "현실 세계에 대한 인식을 추상적 개념으로 표현하는 과정"
  },
  {
    "title": "논리적 설계",
    "concept": "현실 세계에서 발생하는 자료를 특정 DBMS가 지원하는 논리적 자료 구조로 변환(mapping)시키는 과정"
  },
  {
    "title": "물리적 설계",
    "concept": "논리적 설계에서 논리적 구조로 표현된 데이터를 물리적 구조의 데이터로 변환하는 과정"
  },
  {
    "title": "데이터 모델",
    "concept": "현실 세계의 정보들을 컴퓨터에 표현하기 위해서 단순화, 추상화하여 체계적으로 표현한 개념적 모형",
    "types": [
      "구조 : 논리적으로 표현된 개체 타입들 간의 관계로서 데이터 구조 및 정적 성질 표현",
      "연산 : 데이터베이스에 저장된 실제 데이터를 처리하는 작업에 대한 명세로서 데이터베이스를 조작하는 기본 도구",
      "제약 조건 : 데이터베이스에 저장될 수 있는 실제 데이터의 논리적인 제약 조건"
    ]
  },
  {
    "title": "관계형 데이터베이스의 릴레이션 구조",
    "concept": "릴레이션은 데이터들을 표 현태로 표현한 것으로, 구조를 나타내는 릴레이션 스키마와 실제 값인 릴레이션 인스턴스로 구성된다.",
    "src": "https://blog.kakaocdn.net/dn/9PZHv/btq2lAE2xpY/HfgOTfyyYlhGDH0bLt4IIk/img.png"
  },
  {
    "title": "튜플",
    "concept": "릴레이션의 각 행을 튜플이라고 하며, 튜플은 릴레이션의 속성에 대한 값들의 집합으로 구성된다.",
    "types": [
      "파일 구조에서 레코드와 같은 의미",
      "튜플의 수를 카디널리티라고 하며, 튜플의 수는 릴레이션의 행 수와 같다."
    ]
  },
  {
    "title": "속성",
    "concept": "데이터베이스를 구성하는 가장 작은 논리적 단위이다.",
    "types": [
      "파일 구조상의 데이터 항목 또는 데이터 필드에 해당된다.",
      "속성은 개체의 특성을 기술한다.",
      "속성의 수를 디그리 또는 차수라고 한다."
    ]
  },
  {
    "title": "후보키",
    "concept": "속성들 중에서 튜플을 유일하게 식별하기 위해 사용되는 속성들의 부분집합",
    "types": [
      "유일성 : 하나의 키 값으로 하나의 튜플만을 유일하게 식별할 수 있어야 함",
      "최소성 : 키를 구성하는 속성 하나를 제거하면 유일하게 식별할 수 없도록 꼭 필요한 최소의 속성으로 구성되어야 함"
    ]
  },
  {
    "title": "대체키",
    "concept": "후보키가 둘 이상일 때 기본키를 제외한 나머지 후보키",
    "types": ["대체키를 보조키라고도 한다"]
  },
  {
    "title": "슈퍼키",
    "concept": "한 릴레이션 내에 있는 속성들의 집합으로 구성된 키",
    "types": [
      "모든 튜플 중 슈퍼키로 구성된 속성의 집합과 동일한 값은 나타나지 않는다",
      "유일성은 만족하지만, 최소성은 만족하지 못한다"
    ]
  },
  {
    "title": "외래키",
    "concept": "다른 릴레이션의 기본키를 참조하는 속성 또는 속성들의 집합",
    "types": ["외래키로 지정되면 참조 릴레이션의 기본키에 없는 값은 입력할 수 없다"]
  },
  {
    "title": "무결성",
    "concept": "데이터베이스에 저장된 데이터 값과 현실 세계의 실제값이 일치하는 정확성",
    "types": [
      "개체 무결성 : 기본 테이블의 기본키를 구성하는 어떤 속성도 NULL 값이나 중복값을 가질 수 없다는 규정",
      "참조 무결성 : 외래키는 NULL 값이나 참조 릴레이션의 기본키에 존재하는 값만 가질 수 있다는 규정"
    ]
  },
  {
    "title": "순수 관계 연산자",
    "concept": "관계형 데이터베이스에서 릴레이션을 조작하기 위해 사용하는 연산자",
    "types": [
      "Select(σ) : 릴레이션에서 조건에 맞는 튜플을 선택하는 연산자",
      "Project(π) : 릴레이션에서 조건에 맞는 속성을 선택하는 연산자",
      "Join(⨝) : 두 릴레이션을 결합하여 새로운 릴레이션을 생성하는 연산자",
      "Division(÷) : 두 릴레이션을 나누는 연산자, A ÷ B는 A의 속성 중 B의 속성을 제외한 릴레이션을 생성하는 연산자"
    ]
  }
]
